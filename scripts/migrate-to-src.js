import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

// Diret√≥rios para mover para src/
const dirsToMove = [
  'app',
  'components',
  'hooks',
  'lib',
  'utils',
  'types',
  'config',
];

// Cria a pasta src se n√£o existir
if (!fs.existsSync(path.join(process.cwd(), 'src'))) {
  fs.mkdirSync(path.join(process.cwd(), 'src'));
  console.log('‚úÖ Pasta src/ criada');
}

/**
 * Remove um diret√≥rio recursivamente
 */
function removeDirRecursive(dirPath) {
  if (!fs.existsSync(dirPath)) return;

  if (fs.statSync(dirPath).isDirectory()) {
    fs.readdirSync(dirPath).forEach((file) => {
      const curPath = path.join(dirPath, file);
      if (fs.statSync(curPath).isDirectory()) {
        // Recursivamente remove subdiret√≥rios
        removeDirRecursive(curPath);
      } else {
        // Remove arquivos
        fs.unlinkSync(curPath);
      }
    });
    fs.rmdirSync(dirPath);
  }
}

/**
 * Copia e remove diret√≥rio (mover efetivamente)
 */
function moveDirectory(srcPath, destPath) {
  if (!fs.existsSync(srcPath)) {
    console.log(`‚ö†Ô∏è Diret√≥rio ${srcPath} n√£o encontrado, pulando...`);
    return false;
  }

  // Criamos o diret√≥rio de destino se n√£o existir
  if (!fs.existsSync(destPath)) {
    fs.mkdirSync(destPath, { recursive: true });
  }

  let success = false;

  try {
    // No Windows, tentamos robocopy primeiro
    if (process.platform === 'win32') {
      try {
        // Robocopy tem c√≥digos de sa√≠da especiais:
        // 0-7 s√£o considerados sucesso com diferentes n√≠veis de informa√ß√£o
        const result = execSync(`robocopy "${srcPath}" "${destPath}" /E /MIR`, {
          stdio: 'pipe',
          encoding: 'utf8',
        });
        console.log(
          `‚úÖ Copiado ${path.basename(srcPath)}/ para src/${path.basename(srcPath)}/`
        );
        success = true;
      } catch (error) {
        // Robocopy retorna c√≥digos diferentes de 0 mesmo em caso de sucesso
        // C√≥digos < 8 s√£o sucessos
        if (error.status < 8) {
          console.log(
            `‚úÖ Copiado ${path.basename(srcPath)}/ para src/${path.basename(srcPath)}/`
          );
          success = true;
        } else {
          console.log(`‚ö†Ô∏è Falha no robocopy, tentando m√©todo alternativo...`);

          // M√©todo alternativo: xcopy
          try {
            execSync(`xcopy "${srcPath}" "${destPath}" /E /I /H /Y`, {
              stdio: 'pipe',
            });
            console.log(
              `‚úÖ Copiado ${path.basename(srcPath)}/ para src/${path.basename(srcPath)}/ usando xcopy`
            );
            success = true;
          } catch (xcopyError) {
            // Falha no xcopy tamb√©m, usando c√≥pia manual
            console.log(`‚ö†Ô∏è Falha no xcopy, usando m√©todo de c√≥pia manual...`);
            success = copyDirectoryManual(srcPath, destPath);
          }
        }
      }
    } else {
      // No Unix/Linux, usamos cp -r
      execSync(`cp -r "${srcPath}/"* "${destPath}"`);
      console.log(
        `‚úÖ Copiado ${path.basename(srcPath)}/ para src/${path.basename(srcPath)}/`
      );
      success = true;
    }

    // Se a c√≥pia foi bem-sucedida, removemos o diret√≥rio original
    if (success) {
      console.log(
        `üóëÔ∏è Removendo diret√≥rio original ${path.basename(srcPath)}/...`
      );
      removeDirRecursive(srcPath);
      console.log(
        `‚úÖ ${path.basename(srcPath)}/ movido para src/${path.basename(srcPath)}/`
      );
    }

    return success;
  } catch (error) {
    console.error(`‚ùå Erro ao mover ${path.basename(srcPath)}:`, error.message);
    return false;
  }
}

/**
 * M√©todo manual para copiar diret√≥rios quando os comandos do sistema falham
 */
function copyDirectoryManual(source, destination) {
  try {
    if (!fs.existsSync(destination)) {
      fs.mkdirSync(destination, { recursive: true });
    }

    const files = fs.readdirSync(source);

    for (const file of files) {
      const srcFilePath = path.join(source, file);
      const destFilePath = path.join(destination, file);

      if (fs.statSync(srcFilePath).isDirectory()) {
        copyDirectoryManual(srcFilePath, destFilePath);
      } else {
        fs.copyFileSync(srcFilePath, destFilePath);
      }
    }

    return true;
  } catch (err) {
    console.error(`‚ùå Erro na c√≥pia manual: ${err.message}`);
    return false;
  }
}

// Move cada diret√≥rio para src/
let movedCount = 0;
dirsToMove.forEach((dir) => {
  const srcPath = path.join(process.cwd(), dir);
  const destPath = path.join(process.cwd(), 'src', dir);

  if (fs.existsSync(srcPath)) {
    if (moveDirectory(srcPath, destPath)) {
      movedCount++;
    }
  } else {
    console.log(`‚ö†Ô∏è Diret√≥rio ${dir}/ n√£o encontrado, pulando...`);
  }
});

console.log(
  `\nüéâ Migra√ß√£o para estrutura src/ conclu√≠da! ${movedCount}/${dirsToMove.length} diret√≥rios movidos.`
);
console.log(
  '\nAtualize seu tsconfig.json e next.config.js conforme necess√°rio.'
);

// Verifica se ainda existem diret√≥rios originais e alerta
const remainingDirs = dirsToMove.filter((dir) =>
  fs.existsSync(path.join(process.cwd(), dir))
);
if (remainingDirs.length > 0) {
  console.log(
    '\n‚ö†Ô∏è Aviso: Os seguintes diret√≥rios ainda existem na raiz e podem conter duplicatas:'
  );
  remainingDirs.forEach((dir) => console.log(`- ${dir}/`));
  console.log('Considere remov√™-los manualmente se necess√°rio.');
}
